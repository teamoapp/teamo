FORMAT: 1A
<<<<<<< HEAD

# Teamo Api

Teamo project exposes API that could be consumed securily using **Bearer** token. The teamo website consumes the same API on it's own

## User [/user{?expandBasic}]

This is User resource that contains methods related to currently logged in user (user Id from **Bearer** token)

+ Parameters

    + expandBasic = `false` (optional, bool, `true`) ... if should expand fields "username", "name" and "email" of the user

+ Model (application/json)

        {
            "collection": [{
                "id": 5,
                "username": "nick@teamo.com",
                "name": "Nick",
                "email": "nick@teamo.com"
            }]
        }

### Create [POST] 

User Sign Up

+ Request (application/json)

        {
            "username": "nick@teamo.com", 
            "password": "123456",
            "remember_me": true,
            "email": "nick@teamo.com",
            "name": "Nick"
        }

+ Response 200
    
    [User][]

### Read [GET]

Get current user info

+ Response 200

    [User][]

### Update [PATCH]

Using patch, therefore would update only passed fields

+ Request (application/json)

        {
            "name": "Neo",
            "password": "abcdef",
            "old_password": "123456"
        }

+ Response 200

    [User][]

## Company [/company/{id}{?expandBasic,expandOwners,expandOwnerBasic}]

This is User resource that contains methods related to the companies that logged in user owns

+ Parameters

    + id (optional, bool)
    + expandBasic = `false` (optional, bool, `true`) ... expand field "name" and "active" of the company
    + expandOwners = `false` (optional, bool, `true`) ... expand owners of the company
    + expandOwnerBasic = `false` (optional, bool, `true`) ... expand owners basic info

+ Model (application/json)

    + Body
    
            {
                "collection": [{
                    "id": 1,
                    "active": true,
                    "name": "Teamo",
                    "owners" : [{"id": 1, "name": "Adam", "email": "adam@teamo.com", "username": "adam"},
                        {"id": 5, "name": "Neo", "email": "nick@teamo.com", "username": "nick@teamo.com"}]
                }]
            }

### Read [GET]

Get companiy info that current user owns with specified company id

+ Response 200

    [Company][]

### Update [PATCH]

Update specified company that logged in user owns

+ Request (application/json)

        {
            "name": "NewAwesomeFlashyName"
        }

+ Response 200

    [Company][]

## Company Collection [/company{?expandBasic,expandOwners,expandOwnerBasic}]

This is Company Collection resource that contains methods that works on intire collection of the companies that logged in user owns

+ Parameters

    + expandBasic = `false` (optional, bool, `true`) ... expand field "name" and "active" of the company
    + expandOwners = `false` (optional, bool, `true`) ... expand owners of the company
    + expandOwnerBasic = `false` (optional, bool, `true`) ... expand owners basic info

+ Model (application/json)

        {
            "collection": [{
                "id": 1,
                "active": true,
                "name": "Teamo",
                "owners" : [{"id": 1, "name": "Adam", "email": "adam@teamo.com", "username": "adam"},
                    {"id": 5, "name": "Neo", "email": "nick@teamo.com", "username": "nick@teamo.com"}]
            },{
                "id": 21,
                "active": false,
                "name": "MarketVision",
                "owners" : [{"id": 5, "name": "Neo", "email": "nick@teamo.com", "username": "nick@teamo.com"}]
            }]
        }

### Create [POST] 

Create company for the logged in user and assign the user as an owner of the company

+ Request (application/json)

        {
            "name": "Teamo"
        }

+ Response 200

    [Company][]

### Read all [GET]

Get *all* companies that current user owns

+ Response 200

    [Company Collection][]

## Team [/team/{id}{?expandBasic,expandLeaders,expandLeaderBasic}]

+ Parameters

    + id (required, number, `1`) ... unique identity of the team which the teams belong to
    + expandBasic = `false` (optional, bool, `true`) ... expand field "name" of the team
    + expandLeaders = `false` (optional, bool, `true`) ... expand leaders of the team
    + expandLeaderBasic = `false` (optional, bool, `true`) ... expand leader basic info

+ Model (application/json)

        {
            "collection": [{
                "id": 1,
                "name": "Product",
                "leaders" : [
                    {"id": 1, "name": "Adam", "email": "adam@teamo.com", "username": "adam"},
                    {"id": 2, "name": "John", "email": "john@teamo.com", "username": "john@teamo.com"}]
            }]
        }

### Read [GET]

Get team info that current user owns or leads with specified company id

+ Response 200

    [Team][]

### Update [PATCH]

Update specified team that logged in user owns or leads

+ Request (application/json)

        {
            name: "Sales"
        }

+ Response 200

    [Team][]

## Team Collection [/company/{id}/team{?expandBasic,expandLeaders,expandLeaderBasic}]

This is Team Collection resource that operates of all teams that belong to the company that is owned by the logged in user

+ Parameters

    + id (required, number, `1`) ... unique identity of the company which the teams belong to
    + expandBasic = `false` (optional, bool, `true`) ... expand field "name" of the team
    + expandLeaders = `false` (optional, bool, `true`) ... expand leaders of the team
    + expandLeaderBasic = `false` (optional, bool, `true`) ... expand leader basic info

+ Model (application/json)

        {
            "collection": [{
                "id": 1,
                "name": "Product",
                "leaders" : [{"id": 1, "name": "Adam", "email": "adam@teamo.com", "username": "adam"},
                    {"id": 2, "name": "John", "email": "john@teamo.com", "username": "john@teamo.com"}]
            },{
                "id": 21,
                "active": false,
                "name": "Dev",
                "owners" : [
                    {"id": 3, "name": "N8", "email": "n8@teamo.com", "username": "n8"},
                    {"id": 4, "name": "Ryan", "email": "ryan@teamo.com", "username": "ryan"},
                    {"id": 5, "name": "Nick", "email": "nick@teamo.com", "username": "nick@teamo.com"},]
            }]
        }

### Create [POST]

Create team and assign leaders 

+ Request (application/json)

        {
            "name": "Marketing",
            "leaders": [2, 3] // Would assign John and Nate as leaders for the marketing team
        }

+ Response 200

    [Team][]

### Read all [GET]

Get *all* teams for the selected company

+ Response 200

    [Team Collection][]
=======
HOST: http://www.google.com

# teamo
Notes API is a *short texts saving* service similar to its physical paper presence on your table.

# Group Notes
Notes related resources of the **Notes API**

## Notes Collection [/note]
### List all Notes [GET]
+ Response 200 (application/json)

        [{
          "id": 1, "title": "Jogging in park"
        }, {
          "id": 2, "title": "Pick-up posters from post-office"
        }]

### Create a Note [POST]
+ Request (application/json)

        { "title": "Buy cheese and bread for breakfast." }

+ Response 201 (application/json)

        { "id": 3, "title": "Buy cheese and bread for breakfast." }

## Note [/note/{id}]
A single Note object with all its details

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Note to perform action with. Has example value.

### Retrieve a Note [GET]
+ Response 200 (application/json)

    + Header

            X-My-Header: The Value

    + Body

            { "id": 2, "title": "Pick-up posters from post-office" }

### Remove a Note [DELETE]
+ Response 204
>>>>>>> develop
